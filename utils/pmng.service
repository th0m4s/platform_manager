#!/bin/bash
### BEGIN INIT INFO
# Provides:          pmng
# Required-Start:    docker mariadb
# Required-Stop:     docker mariadb
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Platform Manager
# Description:       This is the deamon of the Platform
#                    Manager tool designed to control
#                    and manage the usage of projects
#                    on this machine.
### END INIT INFO

# Using the lsb functions to perform the operations.
. /lib/lsb/init-functions

NAME="Platform Manager"

if [[ $EUID -ne 0 ]]; then
  log_daemon_msg "You must be root to run $NAME."
  log_end_msg 1
  exit 1
fi

EXECUTABLE=/usr/bin/node
MAIN_SCRIPT=%PMNG_MAIN_SCRIPT%

PIDFILE=/var/run/pmng.pid
USER=root:root

test -x $EXECUTABLE || exit 5
test -e $MAIN_SCRIPT || exit 5

running() {
  RUNSTAT=$(start-stop-daemon --start --quiet --pidfile $PIDFILE --chuid $USER --exec $EXECUTABLE --test > /dev/null)
  if [ "$?" = 1 ]; then
    echo y
  fi
}

case $1 in
 start)
  RUNNING=$(running)
  if [ -n "$RUNNING" ]; then
   log_daemon_msg "$NAME already running."
   log_end_msg 1
   exit
  fi
  # Start the daemon.
  log_daemon_msg "Starting $NAME..."
  # Start the daemon with the help of start-stop-daemon
  if start-stop-daemon --start --quiet --oknodo --background --pidfile $PIDFILE --make-pidfile --exec $EXECUTABLE -- $MAIN_SCRIPT ; then
   log_progress_msg "$NAME started."
   log_end_msg 0
  else
   log_end_msg 1
  fi
  ;;
 stop)
  # Stop the daemon.
  if [ -e $PIDFILE ]; then
  RUNNING=$(running)
   if [ -n "$RUNNING" ]; then
    PGID=$(ps -o pgid= $(cat $PIDFILE) | grep -o [0-9]*)
    kill -TERM -$PGID
    log_daemon_msg "$NAME was stopped."
    log_end_msg 0
   else
    log_daemon_msg "$NAME is not running."
    log_end_msg 1
   fi
  else
   log_daemon_msg "$NAME is not running."
   log_end_msg 1
  fi
  ;;
 restart)
  # Restart the daemon.
  $0 stop && sleep 2 && $0 start
  ;;
 status)
  # Check the status of the process.
  if [ -e $PIDFILE ]; then
   RUNNING=$(running)
   if [ -n "$RUNNING" ]; then
    log_daemon_msg "$NAME is running."
    log_end_msg 0
   else
    rm $PIDFILE
    log_daemon_msg "$NAME is not running."
    log_end_msg 0
   fi
  else
   log_daemon_msg "$NAME is not running."
   log_end_msg 0
  fi
  ;;
 *)
  # For invalid arguments, print the usage message.
  echo "Usage: $0 {start|stop|restart|status}"
  exit 2
  ;;
esac
