!function(e){var t={};function a(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,a),s.l=!0,s.exports}a.m=e,a.c=t,a.d=function(e,t,n){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)a.d(n,s,function(t){return e[t]}.bind(null,s));return n},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s="dgcm")}({dgcm:function(e,t){let a=!0;function n(e){null==e?(a=!0,$("#email-change").hide(),$("#input-email").removeAttr("disabled").removeClass("always-disabled")):(a=!1,$("#email-change-email").html(e).parent().show(),$("#input-email").attr("disabled","disabled").addClass("always-disabled"))}function s(){let e={},t=$("#input-newpass").val().trim();if(t.length>0){if(t!=$("#input-confirmpass").val().trim())return null;e.password=t}let n=$("#input-fullname").val().trim();n!=user.fullname&&(e.fullname=n);let s=$("#input-email").val().trim();return s!=user.email&&a&&(e.email=s),e}function l(){return $("input, #confirm-button")}function r(){n(void 0),$.notify({message:"No email change request was found."},{type:"info"})}window.user_me={init:function(){if($("#input-username").val(user.name),$("#input-fullname").val(user.fullname),$("#input-email").val(user.email),n(newEmail),window.onbeforeunload=()=>{let e=s();if(null==e||Object.keys(e).length>0)return"You have unsaved changes on this page. Do you want to leave?"},Object.keys(remoteGits).length>0){$("#gitusers-status").hide();let e=$("#gitusers-list").html("");for(let[t,a]of Object.entries(remoteGits)){let n=a.available;e.append(`<li class="list-group-item" id="line-gituser-${t}"><b>${(0!=a.icon?`<i class="${a.icon}"></i> `:"")+a.name} </b> <span class="text-secondary d-block d-md-inline"><samp class="ml-4" id="status-gituser-${t}">${n?"Account linked":"Account not linked"}</samp></span><span class="float-md-right d-block d-md-inline mt-2 mt-md-0"><div class="btn-group" role="group" style="margin: -3px -10px;"><button class="btn btn-sm btn-${n?"secondary":"primary"}" onclick="user_me.invertGitProvider('${t}', this)"><i class="fas fa-${n?"unlink":"link"}"></i> ${n?"Unlink":"Link"} account</button></div></span></li>`)}e.parent().show()}else $("#gitusers-status").html("No git provider found.").show();if(Object.keys(settingsData).length>0){$("#usersettings-status").hide();let e=$("#usersettings-list").html("");for(let[t,a]of Object.entries(settingsData)){let{type:n,displayName:s}=a;switch(n){case"string":case"number":e.append(`<li class="list-group-item p-2 pl-3"><div class="usersetting-name pt-0 my-1 d-inline-block">${s}:</div><input value="${USER_SETTINGS[t]}" type="${"number"==n?"number":"text"}" class="form-control form-control-sm w-25 float-right" id="input-usersetting-${t}" placeholder="${null==a.placeholder?"":a.placeholder}"></li>`);break;case"enum":let l="";for(let[e,n]of Object.entries(a.values))l+=`<option value=${e}${USER_SETTINGS[t]==e?" selected":""}>${n}</option>`;e.append(`<li class="list-group-item p-2 pl-3"><div class="usersetting-name pt-0 my-1 d-inline-block">${s}:</div><select class="form-control custom-select-sm custom-select w-25 float-right" id="input-usersetting-${t}">${l}</select></li>`);break;case"boolean":e.append(`<li class="list-group-item"><span class="usersetting-name">${s}:</span><input type="checkbox"${USER_SETTINGS[t]?" checked":""} class="float-right mt-2 mb-1" id="input-usersetting-${t}"></li>`);break;default:console.warn("No valid type for user setting",t,"found",n),e.append(`Invalid data type for <code>${t}</code> (found type <code>${n}</code>).`)}$("#input-usersetting-"+t).on("input",e=>{let a=$(e.target),s=a.val();"boolean"==n&&(s=a.is(":checked")),$.post("/api/v1/users/settings/"+t,{value:s}).fail((e,t,a)=>{$.notify({message:"Cannot save user setting."},{type:"warning"}),console.warn("Cannot save user setting (server error):",a)}).done(e=>{e.error&&($.notify({message:"Cannot save user setting."},{type:"warning"}),console.warn("Cabbot save user setting (application error):",e.message))})})}e.parent().show()}else $("#usersettings-status").html("No user settings found.").show()},save:function(){let e=s();if(0==Object.keys(e).length)$.notify({message:"No changes made."},{type:"warning"});else{let t=$("#input-password").val().trim();if(t.length<8)$.notify({message:"Invalid current password."},{type:"warning"});else{let a=$("#confirm-button");l().attr("disabled","disabled").addClass("disabled"),utils.disableButton(a,"Saving changes..."),$.post("/api/v1/users/me",{changes:e,currentPassword:t}).fail((e,t,a)=>{$.notify({message:"Unable to contact server. See console for details."},{type:"danger"}),console.warn("Unable to edit account (server error):",a)}).done(t=>{t.error?($.notify({message:"Unable to save the changes. See console for details."},{type:"danger"}),console.warn("Unable to edit account (application error):",error)):(202==t.code?($.notify({message:"Email change request created. Please first allow the change by clicking Allow on your current email address."},{type:"success"}),n(e.email),$("#input-email").val(user.email)):($.notify({message:"Changes saved."},{type:"success"}),206==t.code?($.notify({message:"Email was not updated because a request already exists."},{type:"warning"}),n(t.newEmail),delete e.email):null!=e.email&&($.notify({message:"To allow the email change, please click Allow on your current email address."},{type:"info"}),$("#input-email").val(user.email),n(e.email),delete e.email)),function(e){user=Object.assign(user,e)}(e),$("input[type=password]").val(""))}).always(()=>{l().removeAttr("disabled").removeClass("disabled"),$(".always-disabled").attr("disabled","disabled").addClass("disabled"),utils.enableButton(a,"Save changes")})}}return!1},resetSSOPassword:function(){let e=$("#reset-dbautopass").attr("disabled","disabled");$.getJSON("/api/v1/users/me/resetdbautopass").fail((e,t,a)=>{$.notify({message:"Unable to reset the database SSO password. See console for details."},{type:"danger"}),console.warn("Unable to reset dbautopass (server error):",a)}).done(e=>{e.error?($.notify({message:"Unable to reset the database SSO password. See console for details."},{type:"danger"}),console.warn("Unable to reset dbautopass (application error):",error)):$.notify({message:"Database SSO password reset."},{type:"success"})}).always(()=>{e.removeAttr("disabled")})},cancelEmailChange:function(){return a||($("#email-change-email").removeAttr("href"),$.getJSON("/api/v1/users/me/cancelEmailChange").fail((e,t,a)=>{404==t?r():($.notify({message:"Unable to cancel the email change request. Please click Deny in the mail you received on your current email address."},{type:"danger"}),console.warn("Cannot cancel email change request (server error):",a))}).done(e=>{e.error?404==e.code?r():($.notify({message:"Cannot cancel the email change request. Please click Deny in the mail you received on your current email address."},{type:"danger"}),console.warn("Cannot cancel email change request (application error):",e.message)):($.notify({message:"Email change request successfully canceled."},{type:"success"}),n(void 0))}).always(()=>{$("#email-change-email").attr("href","#")})),!1},invertGitProvider:function(e,t){let a=remoteGits[e];null!=a&&(t=$(t).attr("disabled","disabled"),a.available?$.getJSON("/api/v1/git/"+e+"/unlinkAccount").fail((t,n,s)=>{$.notify({message:"Unable to unlink your "+a.name+" account."},{type:"danger"}),console.error("Cannot unlink "+e+" account (server error)",n,s)}).done(n=>{n.error?($.notify({message:"Unable to unlink your "+a.name+" account."},{type:"danger"}),console.error("Cannot unlink "+e+" account (application error)",error)):(a.available=!1,$(t).addClass("btn-primary").removeClass("btn-secondary").html("<i class='fas fa-link'></i> Link account"),$("#status-gituser-"+e).html("Account not linked"),$.notify({message:a.name+" account unlinked successfully."},{type:"success"}))}).always(()=>{t.removeAttr("disabled")}):location.href="/panel/git/"+e+"/auth")}}}});