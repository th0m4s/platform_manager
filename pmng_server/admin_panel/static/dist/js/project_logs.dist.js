!function(e){var o={};function t(r){if(o[r])return o[r].exports;var n=o[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,t),n.l=!0,n.exports}t.m=e,t.c=o,t.d=function(e,o,r){t.o(e,o)||Object.defineProperty(e,o,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,o){if(1&o&&(e=t(e)),8&o)return e;if(4&o&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&o&&"string"!=typeof e)for(var n in e)t.d(r,n,function(o){return e[o]}.bind(null,n));return r},t.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(o,"a",o),o},t.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},t.p="",t(t.s=24)}({24:function(e,o){let t=void 0,r=0,n=!1,l=$("#previous-logs-btn");function s(e,o=!1){e?l.attr("disabled","disabled").html("<i class='fas fa-sync fa-spin'></i> Loading..."):o?l.removeAttr("disabled").html('<i class="fas fa-backward"></i> Load previous logs'):l.attr("disabled","disabled").html("Previous logs loaded")}function a(e,o=""){return`<span class="log-line${""==o?"":" "+o} log-${e.substr(31,3).toLowerCase()}">${e}</span>\n`}window.project_logs={init:function(){t=io("/v1/logs"),t.on("connect",(function(){console.log("Socket connected."),t.emit("authentication",{key:API_KEY});let e=$("#logs-samp");t.on("authenticated",(function(){console.log("Socket authenticated."),t.emit("project_logs",{project:window.projectname}),e.html("This panel will automatically updates when logs are received. Use the above button to load previous logs.")})),t.on("unauthorized",(function(e){$.notify({message:"Unable to authenticate to the socket. Please reload the page."},{type:"danger"}),console.error("Unauthorized from the socket",e)})),t.on("logs_start_position",e=>{r=e.position,console.log("Start reading from byte "+r),s(!1,!0)}),t.on("project_log",o=>{n||(n=!0,e.html("")),e.append(a(o.line))}),t.on("log_error",e=>{$.notify({message:"Log reading error. Please reload the page (open console for details)."},{type:"danger"}),console.error("Log error:",e.error)})})),t.on("error",e=>{$.notify({message:"Connection with the socket lost. Please reload the page."},{type:"danger"}),console.log("Socket error",e)})},loadPreviousLogs:function(){s(!0),$.getJSON("/api/v1/logs/project/"+window.projectname+"/previousLogs/"+r).fail((e,o,t)=>{s(!1,!0),$.notify({message:"Server error while reading logs: "+t},{type:"danger"}),console.error(o,t)}).done(e=>{if(s(!1,e.error),e.error)$.notify({message:"Application error while reading logs: "+e.message},{type:"danger"}),console.error(e.message);else if(0==e.lines.length)$("#logs-samp").html("No previous logs found. New logs will automatically be displayed here.");else{n||$("#logs-samp").html("");let o=e.lines,t="";for(let e=0;e<o.length;e++)t+=a(o[e],"previous-log-line");$("#logs-samp").prepend(t),n=!0}})}}}});