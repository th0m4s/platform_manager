!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=20)}({20:function(e,t){let n=!1,r=!1;function o(){$.getJSON("/api/v1/docker/networks/list").fail((e,t,r)=>{n||($.notify({message:"Unable to list networks because of a server error."},{type:"danger"}),n=!0,clearInterval(window.refreshInterval),$(".status-msg").html("An error occured while the list was retrieved by the server. Please try again."+(403==e.status?"<br/>Unauthorized access.":""))),console.warn(r)}).done(e=>{if(e.error)n||($.notify({message:"Unable to list networks because of an application error."},{type:"danger"}),n=!0,clearInterval(window.refreshInterval),$(".status-msg").html("An error occured while the list was processed by the platform. Please try again.")),console.warn(e.code,e.message);else{let t=e.networks;if(0==t.length)$("#networks-card").hide(),$("#networks-status").html("No network found (check your Docker installation for bridge, none and host networks).").show();else{$("#networks-status").hide();let e=$("#networks-list").html(""),n="name";t=t.sort((e,t)=>e[n]<t[n]?-1:e[n]>t[n]?1:0);for(let n of t){let t=`<li class="list-group-item" id="line-network-${n.name}">`+`<b>Network ${s(n.name)}</b> <i>(id ${s(n.networkId)})</i>`+`<span class="float-md-right d-block d-md-inline mt-2 mt-md-0"><div class="btn-group" role="group" style="margin: -3px -10px;"><button class="btn btn-sm btn-info" onclick="docker_nlist.showNetworkDetails('${n.name}')"><i class="fas fa-info-circle"></i> Details</button></div></span> </li>`;e.append(t)}e.parent().show(),$("#networks-status").html()}}}).always(()=>{r||(r=!0,utils.hideLoading())})}function s(e){return`<a href="details/${e}" class="docker-link">${e}</a>`}window.docker_nlist={init:function(){utils.showInfiniteLoading("Loading networks..."),window.refreshInterval=setInterval(o,1e4),o()},showNetworkDetails:function(e){window.location.href="details/"+e}}}});